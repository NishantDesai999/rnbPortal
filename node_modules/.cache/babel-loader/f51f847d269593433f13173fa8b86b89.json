{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _ModalDialog = _interopRequireDefault(require(\"../_shared/ModalDialog\"));\n\nvar _DateTextField = _interopRequireDefault(require(\"../_shared/DateTextField\"));\n\nvar _propTypes2 = _interopRequireDefault(require(\"../constants/prop-types\"));\n\nvar ModalWrapper =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  (0, _inheritsLoose2.default)(ModalWrapper, _PureComponent);\n\n  function ModalWrapper() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;\n    _this.state = {\n      open: false\n    };\n\n    _this.handleKeyDown = function (event) {\n      switch ((0, _keycode.default)(event)) {\n        case 'enter':\n          _this.handleAccept();\n\n          break;\n\n        default:\n          // if keycode is not handled, stop execution\n          return;\n      } // if event was handled prevent other side effects\n\n\n      event.preventDefault();\n    };\n\n    _this.handleSetTodayDate = function () {\n      if (_this.props.onSetToday) {\n        _this.props.onSetToday();\n      }\n    };\n\n    _this.open = function () {\n      _this.setState({\n        open: true\n      });\n\n      if (_this.props.onOpen) {\n        _this.props.onOpen();\n      }\n    };\n\n    _this.close = function () {\n      _this.setState({\n        open: false\n      });\n\n      if (_this.props.onClose) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.handleAccept = function () {\n      _this.close();\n\n      if (_this.props.onAccept) {\n        _this.props.onAccept();\n      }\n    };\n\n    _this.handleDismiss = function () {\n      _this.close();\n\n      if (_this.props.onDismiss) {\n        _this.props.onDismiss();\n      }\n    };\n\n    _this.handleClear = function () {\n      _this.close();\n\n      if (_this.props.onClear) {\n        _this.props.onClear();\n      }\n    };\n\n    return _this;\n  }\n\n  ModalWrapper.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {\n    // only if accept = true close the dialog\n    if (nextProps.isAccepted) {\n      return {\n        open: false\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = ModalWrapper.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        value = _this$props.value,\n        format = _this$props.format,\n        children = _this$props.children,\n        dialogContentClassName = _this$props.dialogContentClassName,\n        onAccept = _this$props.onAccept,\n        onDismiss = _this$props.onDismiss,\n        invalidLabel = _this$props.invalidLabel,\n        labelFunc = _this$props.labelFunc,\n        okLabel = _this$props.okLabel,\n        cancelLabel = _this$props.cancelLabel,\n        clearLabel = _this$props.clearLabel,\n        clearable = _this$props.clearable,\n        todayLabel = _this$props.todayLabel,\n        showTodayButton = _this$props.showTodayButton,\n        onOpen = _this$props.onOpen,\n        onClose = _this$props.onClose,\n        onSetToday = _this$props.onSetToday,\n        isAccepted = _this$props.isAccepted,\n        DialogProps = _this$props.DialogProps,\n        other = (0, _objectWithoutPropertiesLoose2.default)(_this$props, [\"value\", \"format\", \"children\", \"dialogContentClassName\", \"onAccept\", \"onDismiss\", \"invalidLabel\", \"labelFunc\", \"okLabel\", \"cancelLabel\", \"clearLabel\", \"clearable\", \"todayLabel\", \"showTodayButton\", \"onOpen\", \"onClose\", \"onSetToday\", \"isAccepted\", \"DialogProps\"]);\n    return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_DateTextField.default, (0, _extends2.default)({\n      value: value,\n      format: format,\n      onClick: this.open // onFocus={this.togglePicker} <- Currently not properly works with .blur() on TextField\n      ,\n      invalidLabel: invalidLabel,\n      labelFunc: labelFunc,\n      clearable: clearable\n    }, other)), _react.default.createElement(_ModalDialog.default, (0, _extends2.default)({\n      open: this.state.open,\n      onKeyDown: this.handleKeyDown,\n      onClear: this.handleClear,\n      onAccept: this.handleAccept,\n      onDismiss: this.handleDismiss,\n      onSetToday: this.handleSetTodayDate,\n      dialogContentClassName: dialogContentClassName,\n      clearLabel: clearLabel,\n      todayLabel: todayLabel,\n      okLabel: okLabel,\n      cancelLabel: cancelLabel,\n      clearable: clearable,\n      showTodayButton: showTodayButton,\n      children: children\n    }, DialogProps)));\n  };\n\n  return ModalWrapper;\n}(_react.PureComponent);\n\nexports.default = ModalWrapper;\nModalWrapper.defaultProps = {\n  dialogContentClassName: '',\n  invalidLabel: undefined,\n  value: new Date(),\n  labelFunc: undefined,\n  okLabel: 'OK',\n  cancelLabel: 'Cancel',\n  clearLabel: 'Clear',\n  todayLabel: 'Today',\n  clearable: false,\n  showTodayButton: false,\n  format: undefined,\n  onAccept: undefined,\n  onDismiss: undefined,\n  onClear: undefined,\n  onOpen: undefined,\n  onClose: undefined,\n  onSetToday: undefined,\n  DialogProps: undefined\n};\nprocess.env.NODE_ENV !== \"production\" ? ModalWrapper.propTypes = {\n  /** \"OK\" label message */\n  okLabel: _propTypes.default.node,\n\n  /** \"Cancel\" label message */\n  cancelLabel: _propTypes.default.node,\n\n  /** \"Clear\" label message */\n  clearLabel: _propTypes.default.node,\n\n  /** If true clear button will be displayed */\n  clearable: _propTypes.default.bool,\n\n  /** \"Today\" label message */\n  todayLabel: _propTypes.default.string,\n\n  /**\n   * If true today button will be displayed\n   * <b>Note*</b> that clear button has higher priority\n  */\n  showTodayButton: _propTypes.default.bool,\n\n  /** On open callback [(e: Event) => void] */\n  onOpen: _propTypes.default.func,\n\n  /** On close callback [(e: Event) => void] */\n  format: _propTypes.default.string,\n\n  /** Dialog props passed to material-ui Dialog */\n  DialogProps: _propTypes.default.object,\n  value: _propTypes2.default.date,\n  invalidLabel: _propTypes.default.node,\n  labelFunc: _propTypes.default.func,\n  onClose: _propTypes.default.func,\n  onAccept: _propTypes.default.func,\n  onDismiss: _propTypes.default.func,\n  onClear: _propTypes.default.func,\n  onSetToday: _propTypes.default.func,\n  children: _propTypes.default.node.isRequired,\n  dialogContentClassName: _propTypes.default.string,\n  isAccepted: _propTypes.default.bool.isRequired\n} : void 0;","map":null,"metadata":{},"sourceType":"script"}