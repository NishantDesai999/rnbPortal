{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _addDays = _interopRequireDefault(require(\"date-fns/addDays\"));\n\nvar _addMonths = _interopRequireDefault(require(\"date-fns/addMonths\"));\n\nvar _addYears = _interopRequireDefault(require(\"date-fns/addYears\"));\n\nvar _differenceInMilliseconds = _interopRequireDefault(require(\"date-fns/differenceInMilliseconds\"));\n\nvar _eachDayOfInterval = _interopRequireDefault(require(\"date-fns/eachDayOfInterval\"));\n\nvar _endOfDay = _interopRequireDefault(require(\"date-fns/endOfDay\"));\n\nvar _endOfMonth = _interopRequireDefault(require(\"date-fns/endOfMonth\"));\n\nvar _endOfWeek = _interopRequireDefault(require(\"date-fns/endOfWeek\"));\n\nvar _endOfYear = _interopRequireDefault(require(\"date-fns/endOfYear\"));\n\nvar _format2 = _interopRequireDefault(require(\"date-fns/format\"));\n\nvar _getHours = _interopRequireDefault(require(\"date-fns/getHours\"));\n\nvar _getSeconds = _interopRequireDefault(require(\"date-fns/getSeconds\"));\n\nvar _getYear = _interopRequireDefault(require(\"date-fns/getYear\"));\n\nvar _isAfter = _interopRequireDefault(require(\"date-fns/isAfter\"));\n\nvar _isBefore = _interopRequireDefault(require(\"date-fns/isBefore\"));\n\nvar _isEqual2 = _interopRequireDefault(require(\"date-fns/isEqual\"));\n\nvar _isSameDay = _interopRequireDefault(require(\"date-fns/isSameDay\"));\n\nvar _isValid = _interopRequireDefault(require(\"date-fns/isValid\"));\n\nvar _parse = _interopRequireDefault(require(\"date-fns/parse\"));\n\nvar _setHours = _interopRequireDefault(require(\"date-fns/setHours\"));\n\nvar _setMinutes = _interopRequireDefault(require(\"date-fns/setMinutes\"));\n\nvar _setSeconds = _interopRequireDefault(require(\"date-fns/setSeconds\"));\n\nvar _setYear = _interopRequireDefault(require(\"date-fns/setYear\"));\n\nvar _startOfDay = _interopRequireDefault(require(\"date-fns/startOfDay\"));\n\nvar _startOfMonth = _interopRequireDefault(require(\"date-fns/startOfMonth\"));\n\nvar _startOfWeek = _interopRequireDefault(require(\"date-fns/startOfWeek\"));\n\nvar _startOfYear = _interopRequireDefault(require(\"date-fns/startOfYear\"));\n\nvar DateFnsUtils =\n/*#__PURE__*/\nfunction () {\n  function DateFnsUtils(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        locale = _ref.locale;\n\n    this.addDays = _addDays.default;\n    this.isValid = _isValid.default;\n    this.getDiff = _differenceInMilliseconds.default;\n    this.isAfter = _isAfter.default;\n    this.isBefore = _isBefore.default;\n    this.startOfDay = _startOfDay.default;\n    this.endOfDay = _endOfDay.default;\n    this.getHours = _getHours.default;\n    this.setHours = _setHours.default;\n    this.setMinutes = _setMinutes.default;\n    this.getSeconds = _getSeconds.default;\n    this.setSeconds = _setSeconds.default;\n    this.isSameDay = _isSameDay.default;\n    this.getStartOfMonth = _startOfMonth.default;\n    this.getYear = _getYear.default;\n    this.setYear = _setYear.default;\n    this.dateTime12hFormat = 'MMMM do hh:mm aaaa';\n    this.dateTime24hFormat = 'MMMM do HH:mm';\n    this.time12hFormat = 'hh:mm a';\n    this.time24hFormat = 'HH:mm';\n    this.dateFormat = 'MMMM do';\n    this.locale = locale;\n  }\n\n  var _proto = DateFnsUtils.prototype;\n\n  _proto.date = function date(value) {\n    if (typeof value === 'undefined') {\n      return new Date();\n    }\n\n    if (value === null) {\n      return null;\n    }\n\n    return new Date(value);\n  };\n\n  _proto.parse = function parse(value, formatString) {\n    if (value === '') {\n      return null;\n    }\n\n    return (0, _parse.default)(value, formatString, new Date());\n  };\n\n  _proto.format = function format(date, formatString) {\n    return (0, _format2.default)(date, formatString, {\n      locale: this.locale\n    });\n  };\n\n  _proto.isEqual = function isEqual(date, comparing) {\n    if (date === null && comparing === null) {\n      return true;\n    }\n\n    return (0, _isEqual2.default)(date, comparing);\n  };\n\n  _proto.isNull = function isNull(date) {\n    return date === null;\n  };\n\n  _proto.isAfterDay = function isAfterDay(date, value) {\n    return (0, _isAfter.default)(date, (0, _endOfDay.default)(value));\n  };\n\n  _proto.isBeforeDay = function isBeforeDay(date, value) {\n    return (0, _isBefore.default)(date, (0, _startOfDay.default)(value));\n  };\n\n  _proto.isBeforeYear = function isBeforeYear(date, value) {\n    return (0, _isBefore.default)(date, (0, _startOfYear.default)(value));\n  };\n\n  _proto.isAfterYear = function isAfterYear(date, value) {\n    return (0, _isAfter.default)(date, (0, _endOfYear.default)(value));\n  };\n\n  _proto.formatNumber = function formatNumber(num) {\n    return num;\n  };\n\n  _proto.getMinutes = function getMinutes(date) {\n    return date.getMinutes();\n  };\n\n  _proto.getMonth = function getMonth(date) {\n    return date.getMonth();\n  };\n\n  _proto.getMeridiemText = function getMeridiemText(ampm) {\n    return ampm === 'am' ? 'AM' : 'PM';\n  };\n\n  _proto.getNextMonth = function getNextMonth(date) {\n    return (0, _addMonths.default)(date, 1);\n  };\n\n  _proto.getPreviousMonth = function getPreviousMonth(date) {\n    return (0, _addMonths.default)(date, -1);\n  };\n\n  _proto.mergeDateAndTime = function mergeDateAndTime(date, time) {\n    return this.setMinutes(this.setHours(date, this.getHours(time)), this.getMinutes(time));\n  };\n\n  _proto.getWeekdays = function getWeekdays() {\n    var _this = this;\n\n    var now = new Date();\n    return (0, _eachDayOfInterval.default)({\n      start: (0, _startOfWeek.default)(now, {\n        locale: this.locale\n      }),\n      end: (0, _endOfWeek.default)(now, {\n        locale: this.locale\n      })\n    }, {\n      locale: this.locale\n    }).map(function (day) {\n      return (0, _format2.default)(day, 'EEEEEE', {\n        locale: _this.locale\n      });\n    });\n  };\n\n  _proto.getWeekArray = function getWeekArray(date) {\n    var start = (0, _startOfWeek.default)((0, _startOfMonth.default)(date), {\n      locale: this.locale\n    });\n    var end = (0, _endOfWeek.default)((0, _endOfMonth.default)(date), {\n      locale: this.locale\n    });\n    var nestedWeeks = [];\n    var count = 0;\n    var current = start;\n\n    while ((0, _isBefore.default)(current, end)) {\n      var weekNumber = Math.floor(count / 7);\n      nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n      nestedWeeks[weekNumber].push(current);\n      current = (0, _addDays.default)(current, 1);\n      count += 1;\n    }\n\n    return nestedWeeks;\n  };\n\n  _proto.getYearRange = function getYearRange(start, end) {\n    var startDate = (0, _startOfYear.default)(new Date(start));\n    var endDate = (0, _endOfYear.default)(new Date(end));\n    var years = [];\n    var current = startDate;\n\n    while ((0, _isBefore.default)(current, endDate)) {\n      years.push(current);\n      current = (0, _addYears.default)(current, 1);\n    }\n\n    return years;\n  }; // displaying methpds\n\n\n  _proto.getCalendarHeaderText = function getCalendarHeaderText(date) {\n    return (0, _format2.default)(date, 'MMMM yyyy', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getYearText = function getYearText(date) {\n    return (0, _format2.default)(date, 'yyyy', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getDatePickerHeaderText = function getDatePickerHeaderText(date) {\n    return (0, _format2.default)(date, 'EEE, MMM d', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getDateTimePickerHeaderText = function getDateTimePickerHeaderText(date) {\n    return (0, _format2.default)(date, 'MMM d', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getDayText = function getDayText(date) {\n    return (0, _format2.default)(date, 'd', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getHourText = function getHourText(date, ampm) {\n    return (0, _format2.default)(date, ampm ? 'hh' : 'HH', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getMinuteText = function getMinuteText(date) {\n    return (0, _format2.default)(date, 'mm', {\n      locale: this.locale\n    });\n  };\n\n  _proto.getSecondText = function getSecondText(date) {\n    return (0, _format2.default)(date, 'ss', {\n      locale: this.locale\n    });\n  };\n\n  return DateFnsUtils;\n}();\n\nexports.default = DateFnsUtils;","map":null,"metadata":{},"sourceType":"script"}