{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.DateTextField = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Icon = _interopRequireDefault(require(\"@material-ui/core/Icon\"));\n\nvar _InputAdornment = _interopRequireDefault(require(\"@material-ui/core/InputAdornment\"));\n\nvar _TextField = _interopRequireDefault(require(\"@material-ui/core/TextField\"));\n\nvar _IconButton = _interopRequireDefault(require(\"@material-ui/core/IconButton\"));\n\nvar _propTypes2 = _interopRequireDefault(require(\"../constants/prop-types\"));\n\nvar _MaskedInput = _interopRequireDefault(require(\"./MaskedInput\"));\n\nvar _WithUtils = _interopRequireDefault(require(\"./WithUtils\"));\n\nvar getDisplayDate = function getDisplayDate(props) {\n  var utils = props.utils,\n      value = props.value,\n      format = props.format,\n      invalidLabel = props.invalidLabel,\n      emptyLabel = props.emptyLabel,\n      labelFunc = props.labelFunc;\n  var isEmpty = value === null;\n  var date = utils.date(value);\n\n  if (labelFunc) {\n    return labelFunc(isEmpty ? null : date, invalidLabel);\n  }\n\n  if (isEmpty) {\n    return emptyLabel;\n  }\n\n  return utils.isValid(date) ? utils.format(date, format) : invalidLabel;\n};\n\nvar getError = function getError(value, props) {\n  var utils = props.utils,\n      maxDate = props.maxDate,\n      minDate = props.minDate,\n      disablePast = props.disablePast,\n      disableFuture = props.disableFuture,\n      maxDateMessage = props.maxDateMessage,\n      minDateMessage = props.minDateMessage,\n      invalidDateMessage = props.invalidDateMessage;\n\n  if (!utils.isValid(value)) {\n    // if null - do not show error\n    if (utils.isNull(value)) {\n      return '';\n    }\n\n    return invalidDateMessage;\n  }\n\n  if (maxDate && utils.isAfter(value, utils.endOfDay(utils.date(maxDate))) || disableFuture && utils.isAfter(value, utils.endOfDay(utils.date()))) {\n    return maxDateMessage;\n  }\n\n  if (minDate && utils.isBefore(value, utils.startOfDay(utils.date(minDate))) || disablePast && utils.isBefore(value, utils.startOfDay(utils.date()))) {\n    return minDateMessage;\n  }\n\n  return '';\n};\n\nvar DateTextField =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  (0, _inheritsLoose2.default)(DateTextField, _PureComponent);\n\n  function DateTextField() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _PureComponent.call.apply(_PureComponent, [this].concat(args)) || this;\n    _this.state = DateTextField.updateState(_this.props);\n\n    _this.commitUpdates = function (value) {\n      var _this$props = _this.props,\n          clearable = _this$props.clearable,\n          onClear = _this$props.onClear,\n          utils = _this$props.utils,\n          format = _this$props.format,\n          onError = _this$props.onError;\n\n      if (value === '') {\n        if (_this.props.value === null) {\n          _this.setState(DateTextField.updateState(_this.props));\n        } else if (clearable && onClear) {\n          onClear();\n        }\n\n        return;\n      }\n\n      var oldValue = utils.date(_this.state.value);\n      var newValue = utils.parse(value, format);\n      var error = getError(newValue, _this.props);\n\n      _this.setState({\n        error: error,\n        displayValue: value,\n        value: error ? newValue : oldValue\n      }, function () {\n        if (!error && !utils.isEqual(newValue, oldValue)) {\n          _this.props.onChange(newValue);\n        }\n\n        if (error && onError) {\n          onError(newValue, error);\n        }\n      });\n    };\n\n    _this.handleBlur = function (e) {\n      if (_this.props.keyboard) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.commitUpdates(e.target.value);\n\n        if (_this.props.onBlur) {\n          _this.props.onBlur(e);\n        }\n      }\n    };\n\n    _this.handleChange = function (e) {\n      var _this$props2 = _this.props,\n          utils = _this$props2.utils,\n          format = _this$props2.format,\n          onInputChange = _this$props2.onInputChange;\n      var parsedValue = utils.parse(e.target.value, format);\n\n      if (onInputChange) {\n        onInputChange(e);\n      }\n\n      _this.setState({\n        displayValue: e.target.value,\n        error: getError(parsedValue, _this.props)\n      });\n    };\n\n    _this.handleFocus = function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (!_this.props.keyboard) {\n        _this.openPicker(e);\n      }\n    };\n\n    _this.handleKeyPress = function (e) {\n      if (e.key === 'Enter') {\n        if (!_this.props.disableOpenOnEnter) {\n          _this.openPicker(e);\n        } else {\n          _this.commitUpdates(e.target.value);\n        }\n      }\n    };\n\n    _this.openPicker = function (e) {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          onClick = _this$props3.onClick;\n\n      if (!disabled) {\n        onClick(e);\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = DateTextField.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!this.props.utils.isEqual(this.props.value, prevProps.value) || prevProps.format !== this.props.format || prevProps.maxDate !== this.props.maxDate || prevProps.minDate !== this.props.minDate || prevProps.emptyLabel !== this.props.emptyLabel || prevProps.utils !== this.props.utils) {\n      /* eslint-disable-next-line react/no-did-update-set-state */\n      this.setState(DateTextField.updateState(this.props));\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        adornmentPosition = _this$props4.adornmentPosition,\n        clearable = _this$props4.clearable,\n        disabled = _this$props4.disabled,\n        disableFuture = _this$props4.disableFuture,\n        disableOpenOnEnter = _this$props4.disableOpenOnEnter,\n        disablePast = _this$props4.disablePast,\n        emptyLabel = _this$props4.emptyLabel,\n        format = _this$props4.format,\n        InputAdornmentProps = _this$props4.InputAdornmentProps,\n        InputProps = _this$props4.InputProps,\n        invalidDateMessage = _this$props4.invalidDateMessage,\n        invalidLabel = _this$props4.invalidLabel,\n        keyboard = _this$props4.keyboard,\n        keyboardIcon = _this$props4.keyboardIcon,\n        labelFunc = _this$props4.labelFunc,\n        mask = _this$props4.mask,\n        maxDate = _this$props4.maxDate,\n        maxDateMessage = _this$props4.maxDateMessage,\n        minDate = _this$props4.minDate,\n        minDateMessage = _this$props4.minDateMessage,\n        onBlur = _this$props4.onBlur,\n        onClear = _this$props4.onClear,\n        onClick = _this$props4.onClick,\n        pipe = _this$props4.pipe,\n        TextFieldComponent = _this$props4.TextFieldComponent,\n        utils = _this$props4.utils,\n        value = _this$props4.value,\n        onInputChange = _this$props4.onInputChange,\n        other = (0, _objectWithoutPropertiesLoose2.default)(_this$props4, [\"adornmentPosition\", \"clearable\", \"disabled\", \"disableFuture\", \"disableOpenOnEnter\", \"disablePast\", \"emptyLabel\", \"format\", \"InputAdornmentProps\", \"InputProps\", \"invalidDateMessage\", \"invalidLabel\", \"keyboard\", \"keyboardIcon\", \"labelFunc\", \"mask\", \"maxDate\", \"maxDateMessage\", \"minDate\", \"minDateMessage\", \"onBlur\", \"onClear\", \"onClick\", \"pipe\", \"TextFieldComponent\", \"utils\", \"value\", \"onInputChange\"]);\n    var _this$state = this.state,\n        displayValue = _this$state.displayValue,\n        error = _this$state.error;\n    var localInputProps = {\n      inputComponent: _MaskedInput.default,\n      inputProps: {\n        mask: !keyboard ? null : mask,\n        pipe: !keyboard ? null : pipe,\n        readOnly: !keyboard\n      }\n    };\n\n    if (keyboard) {\n      localInputProps[adornmentPosition + \"Adornment\"] = _react.default.createElement(_InputAdornment.default, (0, _extends2.default)({\n        position: adornmentPosition\n      }, InputAdornmentProps), _react.default.createElement(_IconButton.default, {\n        disabled: disabled,\n        onClick: this.openPicker\n      }, _react.default.createElement(_Icon.default, null, ' ', keyboardIcon, ' ')));\n    }\n\n    return _react.default.createElement(TextFieldComponent, (0, _extends2.default)({\n      onClick: this.handleFocus,\n      error: !!error,\n      helperText: error,\n      onKeyPress: this.handleKeyPress,\n      onBlur: this.handleBlur,\n      disabled: disabled,\n      value: displayValue\n    }, other, {\n      onChange: this.handleChange,\n      InputProps: (0, _extends2.default)({}, localInputProps, InputProps)\n    }));\n  };\n\n  return DateTextField;\n}(_react.PureComponent);\n\nexports.DateTextField = DateTextField;\n\nDateTextField.updateState = function (props) {\n  return {\n    value: props.value,\n    displayValue: getDisplayDate(props),\n    error: getError(props.utils.date(props.value), props)\n  };\n};\n\nDateTextField.defaultProps = {\n  disabled: false,\n  invalidLabel: 'Unknown',\n  emptyLabel: '',\n  value: new Date(),\n  labelFunc: undefined,\n  format: undefined,\n  InputProps: undefined,\n  keyboard: false,\n  mask: undefined,\n  keyboardIcon: 'event',\n  disableOpenOnEnter: false,\n  invalidDateMessage: 'Invalid Date Format',\n  clearable: false,\n  onBlur: undefined,\n  onClear: undefined,\n  disablePast: false,\n  disableFuture: false,\n  onError: undefined,\n  onInputChange: undefined,\n  minDate: '1900-01-01',\n  maxDate: '2100-01-01',\n  minDateMessage: 'Date should not be before minimal date',\n  maxDateMessage: 'Date should not be after maximal date',\n  TextFieldComponent: _TextField.default,\n  InputAdornmentProps: {},\n  adornmentPosition: 'end',\n  pipe: undefined\n};\nprocess.env.NODE_ENV !== \"production\" ? DateTextField.propTypes = {\n  value: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.number, _propTypes.default.instanceOf(Date)]),\n  minDate: _propTypes2.default.date,\n  maxDate: _propTypes2.default.date,\n  disablePast: _propTypes.default.bool,\n  disableFuture: _propTypes.default.bool,\n  format: _propTypes.default.string,\n  onBlur: _propTypes.default.func,\n  onChange: _propTypes.default.func.isRequired,\n  onClear: _propTypes.default.func,\n  onClick: _propTypes.default.func.isRequired,\n  clearable: _propTypes.default.bool,\n  utils: _propTypes.default.object.isRequired,\n  disabled: _propTypes.default.bool,\n  InputProps: _propTypes.default.shape(),\n\n  /** Input mask, used in keyboard mode read more <a href=\"https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme\">here</a> */\n  mask: _propTypes.default.any,\n\n  /** Error message, shown if date is less then minimal date */\n  minDateMessage: _propTypes.default.node,\n\n  /** Error message, shown if date is more then maximal date */\n  maxDateMessage: _propTypes.default.node,\n\n  /** Message displaying in text field, if date is invalid (doesn't work in keyboard mode) */\n  invalidLabel: _propTypes.default.string,\n\n  /** Message displaying in text field, if null passed (doesn't work in keyboard mode) */\n  emptyLabel: _propTypes.default.string,\n\n  /** Dynamic label generation function [(date: Date, invalidLabel: string) => string] */\n  labelFunc: _propTypes.default.func,\n\n  /** On/off manual keyboard input mode */\n  keyboard: _propTypes.default.bool,\n\n  /** Icon displayed for open picker button in keyboard mode */\n  keyboardIcon: _propTypes.default.node,\n\n  /** enables/disable automatic opening of the picker when the user clicks enter */\n  disableOpenOnEnter: _propTypes.default.bool,\n\n  /** Message, appearing when date cannot be parsed */\n  invalidDateMessage: _propTypes.default.node,\n\n  /** Component that should replace the default Material-UI TextField */\n  TextFieldComponent: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),\n\n  /** Props to pass to keyboard input adornment */\n  InputAdornmentProps: _propTypes.default.object,\n\n  /** Specifies position of keyboard button adornment */\n  adornmentPosition: _propTypes.default.oneOf(['start', 'end']),\n\n  /** Callback firing when date that applied in the keyboard is invalid\n   *  [(error: string) => void]\n  */\n  onError: _propTypes.default.func,\n\n  /** Callback firing on change input in keyboard mode [(e: Event) => void] */\n  onInputChange: _propTypes.default.func,\n  pipe: _propTypes.default.func\n} : void 0;\n\nvar _default = (0, _WithUtils.default)()(DateTextField);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}