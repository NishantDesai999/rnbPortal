{"ast":null,"code":"import _classCallCheck from \"E:\\\\Codes\\\\Github\\\\roadWebPortal\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Codes\\\\Github\\\\roadWebPortal\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Codes\\\\Github\\\\roadWebPortal\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Codes\\\\Github\\\\roadWebPortal\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Codes\\\\Github\\\\roadWebPortal\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Codes\\\\Github\\\\roadWebPortal\\\\src\\\\Officer\\\\ComplaintTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ComplaintFullView from \"../Components/ComplaintFullView\"; // import Card from '@material-ui/core/Card';\n\nvar styles = function styles(theme) {\n  return {};\n};\n\nvar ComplaintTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ComplaintTable, _Component);\n\n  function ComplaintTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ComplaintTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ComplaintTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      page: 0,\n      rowsPerPage: 25,\n      openComplaintDialogState: false,\n      ComplaintDialogData: null\n    };\n\n    _this.handleComplaintDialogClose = function () {\n      _this.setState({\n        ComplaintDialogData: null,\n        openComplaintDialogState: false\n      });\n    };\n\n    _this.handleComplaintDialogOpen = function (ComplaintDialogData) {\n      _this.setState({\n        ComplaintDialogData: ComplaintDialogData,\n        openComplaintDialogState: true\n      });\n    };\n\n    _this.handleChangePage = function (event, page) {\n      _this.setState({\n        page: page\n      });\n    };\n\n    _this.handleChangeRowsPerPage = function (event) {\n      _this.setState({\n        rowsPerPage: event.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ComplaintTable, [{\n    key: \"render\",\n    //----------------------------------------------\n    value: function render() {\n      var _this2 = this;\n\n      // let { classes } = this.props;\n      var _this$state = this.state,\n          rowsPerPage = _this$state.rowsPerPage,\n          page = _this$state.page;\n      var emptyRows = rowsPerPage - Math.min(rowsPerPage, this.props.complaintsData.length - page * rowsPerPage);\n      return React.createElement(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(ComplaintFullView, {\n        ComplaintDialogData: this.state.ComplaintDialogData,\n        handleComplaintDialogClose: this.handleComplaintDialogClose,\n        openComplaintDialogState: this.state.openComplaintDialogState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Toolbar, {\n        style: {\n          overflowX: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Complaints Table\")), React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(TablePagination, {\n        component: \"div\",\n        count: this.props.complaintsData.length,\n        rowsPerPageOptions: [15, 30, 45],\n        rowsPerPage: rowsPerPage,\n        page: page,\n        backIconButtonProps: {\n          'aria-label': 'Previous Page'\n        },\n        nextIconButtonProps: {\n          'aria-label': 'Next Page'\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.handleChangeRowsPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })))), this.props.isLoading ? React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }) : '', React.createElement(\"div\", {\n        style: {\n          overflowX: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"index\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Girevance\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Status\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Emergency\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"#\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.props.complaintsData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (item, index) {\n        return React.createElement(TableRow, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          component: \"th\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, page * rowsPerPage + index + 1), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, item.grievType), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, item.complaint_status), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"NO\"), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(Button, {\n          onClick: function onClick() {\n            _this2.handleComplaintDialogOpen(item);\n          },\n          color: \"secondary\",\n          variant: \"raised\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, \"view\")));\n      }), emptyRows > 0 && React.createElement(TableRow, {\n        style: {\n          height: 49 * emptyRows\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        colSpan: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ComplaintTable;\n}(Component);\n\nComplaintTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(ComplaintTable);","map":{"version":3,"sources":["E:\\Codes\\Github\\roadWebPortal\\src\\Officer\\ComplaintTable.js"],"names":["React","Component","PropTypes","withStyles","Grid","Paper","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Button","Toolbar","Typography","LinearProgress","CircularProgress","ComplaintFullView","styles","theme","ComplaintTable","state","page","rowsPerPage","openComplaintDialogState","ComplaintDialogData","handleComplaintDialogClose","setState","handleComplaintDialogOpen","handleChangePage","event","handleChangeRowsPerPage","target","value","emptyRows","Math","min","props","complaintsData","length","overflowX","isLoading","slice","map","item","index","grievType","complaint_status","height","propTypes","classes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport ComplaintFullView from \"../Components/ComplaintFullView\";\n\n// import Card from '@material-ui/core/Card';\n\nconst styles = theme => ({\n\n})\n\nclass ComplaintTable extends Component {\n\n    state = {\n        page: 0,\n        rowsPerPage: 25,\n        openComplaintDialogState: false,\n        ComplaintDialogData: null\n    };\n\n    //-----------------------------------------\n    //handling complaint full view\n    handleComplaintDialogClose = () => {\n        this.setState({\n            ComplaintDialogData: null,\n            openComplaintDialogState: false\n        })\n    }\n\n    handleComplaintDialogOpen = (ComplaintDialogData) => {\n        this.setState({\n            ComplaintDialogData: ComplaintDialogData,\n            openComplaintDialogState: true\n        })\n    }\n    //----------------------------------------------\n\n\n    //----------------------------------------------\n    //handling table pagination\n    handleChangePage = (event, page) => {\n        this.setState({ page });\n      };\n    \n    handleChangeRowsPerPage = event => {\n        this.setState({ rowsPerPage: event.target.value });\n    };\n    //----------------------------------------------\n\n    render() {\n        // let { classes } = this.props;\n        const { rowsPerPage, page } = this.state;\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, this.props.complaintsData.length - page * rowsPerPage);\n\n        return (\n            <Paper>\n                <ComplaintFullView ComplaintDialogData={this.state.ComplaintDialogData} handleComplaintDialogClose={this.handleComplaintDialogClose} openComplaintDialogState={this.state.openComplaintDialogState}  />\n                <Toolbar style={{overflowX: 'auto',}}>\n                    <Grid container>\n                        <Grid item xs>\n                            <Typography variant=\"title\">Complaints Table</Typography>\n                        </Grid>\n                        <Grid item xs>\n                            <TablePagination\n                                component=\"div\"\n                                count={this.props.complaintsData.length}\n                                rowsPerPageOptions={[15, 30, 45]}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                backIconButtonProps={{\n                                'aria-label': 'Previous Page',\n                                }}\n                                nextIconButtonProps={{\n                                'aria-label': 'Next Page',\n                                }}\n                                onChangePage={this.handleChangePage}\n                                onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                            />\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n                { this.props.isLoading ? <LinearProgress /> : '' }\n                <div style={{overflowX: 'auto',}}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>index</TableCell>\n                                <TableCell>Girevance</TableCell>\n                                <TableCell>Status</TableCell>\n                                <TableCell>Emergency</TableCell>\n                                <TableCell>#</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                this.props.complaintsData\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((item, index) => (\n                                    <TableRow key={index}>\n                                        <TableCell component=\"th\" >{page * rowsPerPage + index+1}</TableCell>\n                                        <TableCell>{item.grievType}</TableCell>\n                                        <TableCell>{item.complaint_status}</TableCell>\n                                        <TableCell>NO</TableCell>\n                                        <TableCell><Button \n                                            onClick={\n                                                () => {\n                                                    this.handleComplaintDialogOpen(item);\n                                                }\n                                            }\n                                            color=\"secondary\"\n                                            variant=\"raised\"\n                                        >view</Button></TableCell>\n                                    </TableRow>\n                                ))\n                            }\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 49 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </div>\n            </Paper>  \n        );\n    }\n}\n\nComplaintTable.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ComplaintTable);"]},"metadata":{},"sourceType":"module"}