{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.Calendar = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _withStyles = _interopRequireDefault(require(\"@material-ui/core/styles/withStyles\"));\n\nvar _reactEventListener = _interopRequireDefault(require(\"react-event-listener\"));\n\nvar _dateUtils = require(\"../../_helpers/date-utils\");\n\nvar _CalendarHeader = _interopRequireDefault(require(\"./CalendarHeader\"));\n\nvar _Day = _interopRequireDefault(require(\"./Day\"));\n\nvar _DayWrapper = _interopRequireDefault(require(\"./DayWrapper\"));\n\nvar _propTypes2 = _interopRequireDefault(require(\"../../constants/prop-types\"));\n\nvar _WithUtils = _interopRequireDefault(require(\"../../_shared/WithUtils\"));\n\nvar _SlideTransition = _interopRequireDefault(require(\"./SlideTransition\"));\n/* eslint-disable no-unused-expressions */\n\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(Calendar, _Component);\n\n  function Calendar() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {\n      slideDirection: 'left',\n      currentMonth: _this.props.utils.getStartOfMonth(_this.props.date)\n    };\n\n    _this.onDateSelect = function (day, isFinish) {\n      if (isFinish === void 0) {\n        isFinish = true;\n      }\n\n      var _this$props = _this.props,\n          date = _this$props.date,\n          utils = _this$props.utils;\n\n      _this.props.onChange(utils.mergeDateAndTime(day, date), isFinish);\n    };\n\n    _this.handleChangeMonth = function (newMonth, slideDirection) {\n      _this.setState({\n        currentMonth: newMonth,\n        slideDirection: slideDirection\n      });\n    };\n\n    _this.validateMinMaxDate = function (day) {\n      var _this$props2 = _this.props,\n          minDate = _this$props2.minDate,\n          maxDate = _this$props2.maxDate,\n          utils = _this$props2.utils;\n      return minDate && utils.isBeforeDay(day, utils.date(minDate)) || maxDate && utils.isAfterDay(day, utils.date(maxDate));\n    };\n\n    _this.shouldDisablePrevMonth = function () {\n      var _this$props3 = _this.props,\n          utils = _this$props3.utils,\n          disablePast = _this$props3.disablePast,\n          minDate = _this$props3.minDate;\n      var now = utils.date();\n      return !utils.isBefore(utils.getStartOfMonth(disablePast && utils.isAfter(now, minDate) ? now : utils.date(minDate)), _this.state.currentMonth);\n    };\n\n    _this.shouldDisableNextMonth = function () {\n      var _this$props4 = _this.props,\n          utils = _this$props4.utils,\n          disableFuture = _this$props4.disableFuture,\n          maxDate = _this$props4.maxDate;\n      var now = utils.date();\n      return !utils.isAfter(utils.getStartOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : utils.date(maxDate)), _this.state.currentMonth);\n    };\n\n    _this.shouldDisableDate = function (day) {\n      var _this$props5 = _this.props,\n          disablePast = _this$props5.disablePast,\n          disableFuture = _this$props5.disableFuture,\n          shouldDisableDate = _this$props5.shouldDisableDate,\n          utils = _this$props5.utils;\n      return disableFuture && utils.isAfterDay(day, utils.date()) || disablePast && utils.isBeforeDay(day, utils.date()) || _this.validateMinMaxDate(day) || shouldDisableDate(day);\n    };\n\n    _this.moveToDay = function (day) {\n      if (day && !_this.shouldDisableDate(day)) {\n        _this.onDateSelect(day, false);\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var _this$props6 = _this.props,\n          theme = _this$props6.theme,\n          date = _this$props6.date,\n          utils = _this$props6.utils;\n\n      switch ((0, _keycode.default)(event)) {\n        case 'up':\n          _this.moveToDay(utils.addDays(date, -7));\n\n          break;\n\n        case 'down':\n          _this.moveToDay(utils.addDays(date, 7));\n\n          break;\n\n        case 'left':\n          theme.direction === 'ltr' ? _this.moveToDay(utils.addDays(date, -1)) : _this.moveToDay(utils.addDays(date, 1));\n          break;\n\n        case 'right':\n          theme.direction === 'ltr' ? _this.moveToDay(utils.addDays(date, 1)) : _this.moveToDay(utils.addDays(date, -1));\n          break;\n\n        default:\n          // if keycode is not handled, stop execution\n          return;\n      } // if event was handled prevent other side effects (e.g. page scroll)\n\n\n      event.preventDefault();\n    };\n\n    _this.renderWeeks = function () {\n      var utils = _this.props.utils;\n      var currentMonth = _this.state.currentMonth;\n      var weeks = utils.getWeekArray(currentMonth);\n      return weeks.map(function (week) {\n        return _react.default.createElement(\"div\", {\n          key: \"week-\" + week[0].toString(),\n          className: _this.props.classes.week\n        }, _this.renderDays(week));\n      });\n    };\n\n    _this.renderDays = function (week) {\n      var _this$props7 = _this.props,\n          date = _this$props7.date,\n          renderDay = _this$props7.renderDay,\n          utils = _this$props7.utils;\n      var selectedDate = utils.startOfDay(date);\n      var currentMonthNumber = utils.getMonth(_this.state.currentMonth);\n      var now = utils.date();\n      return week.map(function (day) {\n        var disabled = _this.shouldDisableDate(day);\n\n        var dayInCurrentMonth = utils.getMonth(day) === currentMonthNumber;\n\n        var dayComponent = _react.default.createElement(_Day.default, {\n          current: utils.isSameDay(day, now),\n          hidden: !dayInCurrentMonth,\n          disabled: disabled,\n          selected: utils.isSameDay(selectedDate, day)\n        }, utils.getDayText(day));\n\n        if (renderDay) {\n          dayComponent = renderDay(day, selectedDate, dayInCurrentMonth, dayComponent);\n        }\n\n        return _react.default.createElement(_DayWrapper.default, {\n          key: day.toString(),\n          value: day,\n          dayInCurrentMonth: dayInCurrentMonth,\n          disabled: disabled,\n          onSelect: _this.onDateSelect\n        }, dayComponent);\n      });\n    };\n\n    return _this;\n  }\n\n  Calendar.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, state) {\n    if (!nextProps.utils.isEqual(nextProps.date, state.lastDate)) {\n      return {\n        lastDate: nextProps.date,\n        currentMonth: nextProps.utils.getStartOfMonth(nextProps.date)\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Calendar.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props8 = this.props,\n        date = _this$props8.date,\n        minDate = _this$props8.minDate,\n        maxDate = _this$props8.maxDate,\n        utils = _this$props8.utils,\n        disableFuture = _this$props8.disableFuture,\n        disablePast = _this$props8.disablePast;\n\n    if (this.shouldDisableDate(date)) {\n      this.onDateSelect((0, _dateUtils.findClosestEnabledDate)({\n        date: date,\n        utils: utils,\n        minDate: minDate,\n        maxDate: maxDate,\n        disablePast: disablePast,\n        disableFuture: disableFuture,\n        shouldDisableDate: this.shouldDisableDate\n      }), false);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$state = this.state,\n        currentMonth = _this$state.currentMonth,\n        slideDirection = _this$state.slideDirection;\n    var _this$props9 = this.props,\n        classes = _this$props9.classes,\n        utils = _this$props9.utils,\n        allowKeyboardControl = _this$props9.allowKeyboardControl;\n    return _react.default.createElement(_react.Fragment, null, allowKeyboardControl && _react.default.createElement(_reactEventListener.default, {\n      target: \"window\",\n      onKeyDown: this.handleKeyDown\n    }), _react.default.createElement(_CalendarHeader.default, {\n      slideDirection: slideDirection,\n      currentMonth: currentMonth,\n      onMonthChange: this.handleChangeMonth,\n      leftArrowIcon: this.props.leftArrowIcon,\n      rightArrowIcon: this.props.rightArrowIcon,\n      disablePrevMonth: this.shouldDisablePrevMonth(),\n      disableNextMonth: this.shouldDisableNextMonth(),\n      utils: utils\n    }), _react.default.createElement(_SlideTransition.default, {\n      slideDirection: slideDirection,\n      transKey: currentMonth.toString(),\n      className: classes.transitionContainer\n    }, _react.default.createElement(\"div\", {\n      /* eslint-disable-next-line */\n      autoFocus: true // Autofocus required for getting work keyboard navigation feature\n\n    }, this.renderWeeks())));\n  };\n\n  return Calendar;\n}(_react.Component);\n\nexports.Calendar = Calendar;\nCalendar.defaultProps = {\n  minDate: '1900-01-01',\n  maxDate: '2100-01-01',\n  disablePast: false,\n  disableFuture: false,\n  leftArrowIcon: undefined,\n  rightArrowIcon: undefined,\n  renderDay: undefined,\n  allowKeyboardControl: false,\n  shouldDisableDate: function shouldDisableDate() {\n    return false;\n  }\n};\nprocess.env.NODE_ENV !== \"production\" ? Calendar.propTypes = {\n  date: _propTypes.default.object.isRequired,\n  minDate: _propTypes2.default.date,\n  maxDate: _propTypes2.default.date,\n  classes: _propTypes.default.object.isRequired,\n  onChange: _propTypes.default.func.isRequired,\n  disablePast: _propTypes.default.bool,\n  disableFuture: _propTypes.default.bool,\n  leftArrowIcon: _propTypes.default.node,\n  rightArrowIcon: _propTypes.default.node,\n  renderDay: _propTypes.default.func,\n  theme: _propTypes.default.object.isRequired,\n  shouldDisableDate: _propTypes.default.func,\n  utils: _propTypes.default.object.isRequired,\n  allowKeyboardControl: _propTypes.default.bool\n} : void 0;\n\nvar styles = function styles(theme) {\n  return {\n    transitionContainer: {\n      minHeight: 36 * 6,\n      marginTop: theme.spacing.unit * 1.5\n    },\n    week: {\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  };\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiPickersCalendar',\n  withTheme: true\n})((0, _WithUtils.default)()(Calendar));\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}